#include "kNN.hpp"

using namespace color;
int COUNT_DELETE;
void get_COUNT_DELETE() {
    cout << "COUNT_DELETE: " << YELLOW_BACKGROUND << COUNT_DELETE << RESET << endl;
}

//    tc1();
//void tc1(){
//    Dataset dataset;
//    dataset.loadFromCSV("init_dataset_199.csv");
//    dataset.printHead();
//    dataset.printTail();
//    int nRows, nCols;
//    dataset.getShape(nRows, nCols);
//    cout << "Shape: " << nRows << "x" << nCols << endl;
//
//    kNN knn;
//    Dataset X_train, X_test, y_train, y_test;
//    Dataset feature = dataset.extract(0, -1, 1, -1);
//    Dataset label = dataset.extract(0, -1, 0, 0);
//    train_test_split(feature, label, 0.2, X_train, X_test, y_train, y_test);
//
//    knn.fit(X_train, y_train);
//    Dataset y_pred = knn.predict(X_test);
//    double accuracy = knn.score(y_test, y_pred);
//    cout << "Accuracy: " << accuracy << endl;
//}

////////////////////////////////////////////////////////////////////////////////////////////

[[maybe_unused]] void test_constructor(int n = 100) {
    auto* list_0 = new ArrayList<int>();
    auto* list_1 = new ArrayList<int>(n);
    auto* list_2 = new ArrayList<int>(*list_1);
    auto* list_3 = new ArrayList<int>();
    *list_3 = *list_2;

    delete list_0;
    delete list_1;
    delete list_2;
    delete list_3;
    get_COUNT_DELETE();
}

[[maybe_unused]] void test_iterator(int n = 30) {
    auto* list_0 = new ArrayList<int>();
    cout << CYAN << "push_back method" << RESET << endl;
    for (int i = 0; i < n; ++i) {
        list_0->push_back(i);
    }
    list_0->info();

    cout << CYAN << "iterator, normal for" << RESET << endl;
    for (auto it = list_0->begin(); it != list_0->end(); ++it) { // NOLINT(*-loop-convert)
        cout << *it << " ";
    }
    cout << endl;

    cout << CYAN << "iterator, range-base" << RESET << endl;
    for (int& i : *list_0) {
        cout << i << " ";
    }
    cout << endl;


    delete list_0;
    get_COUNT_DELETE();
}

[[maybe_unused]] void test_0(int n = 10) {
    auto* list_0 = new ArrayList<int>();

    cout << CYAN << "push_back method" << RESET << endl;
    for (int i = 0; i < n; ++i) {
        list_0->push_back(i);
    }
    list_0->info();

    cout << CYAN << "operator []" << RESET << endl;
    for (int i = 0; i < n; ++i) {
        cout << (*list_0)[i] << " ";
    }
    cout << endl;

    cout << CYAN << "Remove method" << RESET << endl;
    for (int i = 0; i < n + 1; ++i) {
        cout << list_0->pop() << endl;
        list_0->print();
    }

    delete list_0;
    get_COUNT_DELETE();
}

[[maybe_unused]] void test_1(int n = 50) {
    auto* list_0 = new ArrayList<int>();
    cout << CYAN << "push_front method" << RESET << endl;
    for (int i = 0; i < n; ++i) {
        list_0->push_front(i);
    }
    list_0->info();

    auto* list_1 = new ArrayList<int>();
    cout << CYAN << "insert method" << RESET << endl;
    for (int i = 0; i < n; ++i) {
        list_1->insert(i, 2*i);
    }
    list_1->info();

    auto* list_2 = new ArrayList<int>();
    cout << CYAN << "insert method" << RESET << endl;
    for (int i = 0; i < n / 2; ++i) {
        list_2->insert(i, 2*i);
    }
    list_2->info();
    for (int i = n / 2; i < n; ++i) {
        list_2->insert(i + 1, 2*i);
    }
    list_2->info();

    delete list_0;
    delete list_1;
    delete list_2;
    get_COUNT_DELETE();
}

[[maybe_unused]] void test_2(int n = 30) {
    auto* list_0 = new ArrayList<int>();
    cout << CYAN << "push_front method" << RESET << endl;
    for (int i = 0; i < n; ++i) {
        list_0->push_front(i);
    }
    list_0->info();

    list_0->get(0) = -99;

    cout << CYAN << "operator []" << RESET << endl;
    cout << (*list_0)[0] << " " << (*list_0)[n - 1] << endl;

    cout << CYAN << "Accessing out of range" << RESET << endl;
    try {
        cout << (*list_0)[n] << endl;
    } catch (std::out_of_range& e) {
        cout << RED << e.what() << RESET << endl;
    }

    delete list_0;
    get_COUNT_DELETE();
}

[[maybe_unused]] void test_3(int n = 20) {
    auto* list_0 = new ArrayList<int>();
    cout << CYAN << "insert method" << RESET << endl;
    for (int i = 0; i < n; ++i) {
        list_0->insert(i, i * 3);
    }
    list_0->info();

    cout << CYAN << "reverse method" << RESET << endl;
    list_0->reverse();
    list_0->info();

    auto* list_1 = new ArrayList<int>(21);
    cout << CYAN << "push_front method" << RESET << endl;
    for (int i = 0; i < n; ++i) {
        list_1->push_front(2*i);
    }
    list_1->info();

    cout << CYAN << "clear method" << RESET << endl;
    list_1->clear();
    list_1->info();


    delete list_0;
    get_COUNT_DELETE();
}

////////////////////////////////////////////////////////////////////////////////////////////

[[maybe_unused]] void test_load_image() {
    int pixels_5[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,159,253,159,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,238,252,252,252,237,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,227,253,252,239,233,252,57,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,60,224,252,253,252,202,84,252,253,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,252,252,252,253,252,252,96,189,253,167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,238,253,253,190,114,253,228,47,79,255,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,238,252,252,179,12,75,121,21,0,0,253,243,50,0,0,0,0,0,0,0,0,0,0,0,0,0,38,165,253,233,208,84,0,0,0,0,0,0,253,252,165,0,0,0,0,0,0,0,0,0,0,0,0,7,178,252,240,71,19,28,0,0,0,0,0,0,253,252,195,0,0,0,0,0,0,0,0,0,0,0,0,57,252,252,63,0,0,0,0,0,0,0,0,0,253,252,195,0,0,0,0,0,0,0,0,0,0,0,0,198,253,190,0,0,0,0,0,0,0,0,0,0,255,253,196,0,0,0,0,0,0,0,0,0,0,0,76,246,252,112,0,0,0,0,0,0,0,0,0,0,253,252,148,0,0,0,0,0,0,0,0,0,0,0,85,252,230,25,0,0,0,0,0,0,0,0,7,135,253,186,12,0,0,0,0,0,0,0,0,0,0,0,85,252,223,0,0,0,0,0,0,0,0,7,131,252,225,71,0,0,0,0,0,0,0,0,0,0,0,0,85,252,145,0,0,0,0,0,0,0,48,165,252,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,253,225,0,0,0,0,0,0,114,238,253,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,252,249,146,48,29,85,178,225,253,223,167,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,252,252,252,229,215,252,252,252,196,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,199,252,252,253,252,252,233,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,128,252,253,252,141,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int* p_pixels_5 = pixels_5;
    Image img_5;
    img_5.load(p_pixels_5, 28 * 28);
    img_5.print();

    cout << '\n' << "--------------------------" << '\n' << endl;

    int pixels_9[] = {4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,190,25,0,0,0,0,0,0,0,0,0,0,0,13,25,10,0,0,0,0,0,0,0,0,0,0,0,112,252,125,4,0,0,0,0,0,0,0,0,0,0,132,252,113,0,0,0,0,0,0,0,0,0,0,0,61,252,252,36,0,0,0,0,0,0,0,0,0,0,132,252,240,79,0,0,0,0,0,0,0,0,0,0,84,252,252,36,0,0,0,0,0,0,0,0,0,0,132,252,252,238,52,0,0,0,0,0,0,0,0,12,198,252,252,122,0,0,0,0,0,0,0,0,0,0,99,252,252,252,181,17,0,0,0,0,0,0,0,49,252,252,252,122,0,0,0,0,0,0,0,0,0,0,3,125,252,252,252,100,0,0,0,0,0,0,0,26,218,252,252,36,0,0,0,0,0,0,0,0,0,0,0,15,216,252,252,207,19,0,0,0,0,0,0,49,252,252,252,36,0,0,0,0,0,0,0,0,0,0,0,0,157,252,252,252,48,0,0,0,6,109,109,194,252,252,252,36,0,0,0,0,0,0,0,0,0,0,0,0,100,252,252,252,105,0,58,116,128,252,252,252,252,252,212,19,0,0,0,0,0,0,0,0,0,0,0,0,0,164,253,253,253,253,253,253,255,253,253,253,253,253,253,99,0,0,0,0,0,0,0,0,0,0,0,0,0,49,252,252,252,252,252,252,253,252,252,252,252,252,252,155,0,0,0,0,0,0,0,0,0,0,0,0,0,49,252,252,252,252,252,252,217,216,141,126,252,252,252,155,0,0,0,0,0,0,0,0,0,0,0,0,0,49,252,252,252,234,204,89,0,0,0,49,252,252,252,155,0,0,0,0,0,0,0,0,0,0,0,0,0,14,158,192,151,45,0,0,0,0,0,49,252,252,252,225,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,252,252,252,252,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,228,252,252,252,157,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,229,252,252,252,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,232,252,252,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,206,131,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int* p_pixels_9 = pixels_9;
    Image img_9;
    img_9.load(p_pixels_9, 28 * 28);
    img_9.print();

    cout << '\n' << "--------------------------" << '\n' << endl;

    int pixels_8[] = {8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,154,180,255,176,118,118,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,253,253,253,253,253,253,236,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,253,204,177,177,177,243,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,216,22,0,0,23,227,238,96,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,205,0,0,17,124,253,253,253,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,234,62,18,201,253,253,253,251,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,253,253,253,253,253,253,221,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,253,253,253,253,208,24,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,236,253,253,253,251,97,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,69,224,253,253,240,169,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,134,253,253,253,253,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,225,253,253,253,253,253,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,227,253,253,250,174,253,253,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,253,253,179,63,111,253,253,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,251,201,13,5,0,166,253,253,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,222,253,198,0,0,0,248,253,231,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,243,253,124,0,38,133,252,253,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,253,253,237,179,223,253,253,190,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,230,253,253,253,253,253,244,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,231,253,253,253,182,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int* p_pixels_8 = pixels_8;
    Image img_8;
    img_8.load(p_pixels_8, 28 * 28);
    img_8.print();

    cout << '\n' << "--------------------------" << '\n' << endl;

    int pixels_3[] = {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,80,207,255,254,254,254,97,80,80,44,0,0,0,0,0,0,0,0,0,0,0,0,0,39,158,158,158,168,253,253,253,253,253,253,253,253,253,210,38,0,0,0,0,0,0,0,0,0,0,0,0,226,253,253,253,253,253,253,253,253,253,253,253,253,253,253,241,146,0,0,0,0,0,0,0,0,0,0,0,139,253,253,253,238,113,215,253,253,253,253,253,253,253,253,253,210,43,0,0,0,0,0,0,0,0,0,0,39,34,34,34,30,0,31,148,34,204,235,253,253,253,253,253,236,64,0,0,0,0,0,0,0,0,0,0,91,0,0,0,0,0,0,0,0,35,199,253,253,253,253,244,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,33,202,202,216,253,253,253,253,241,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,167,253,253,253,253,253,253,253,238,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,253,253,253,253,253,253,253,253,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,201,253,253,253,253,253,253,253,230,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,87,87,87,248,253,253,253,253,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,152,253,253,253,250,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,238,253,253,253,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,233,253,253,150,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,203,253,253,253,138,0,0,0,0,0,0,0,0,0,0,0,66,211,211,211,59,36,36,21,26,36,151,222,253,253,253,253,138,0,0,0,0,0,0,0,0,0,0,0,80,253,253,253,253,253,253,195,215,253,253,253,253,253,253,157,77,0,0,0,0,0,0,0,0,0,0,0,80,253,253,253,253,253,253,253,253,253,253,253,253,237,235,40,0,0,0,0,0,0,0,0,0,0,0,0,49,156,247,253,253,253,253,253,253,253,253,159,156,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,253,253,253,253,253,126,78,78,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int* p_pixels_3 = pixels_3;
    Image img_3;
    img_3.load(p_pixels_3, 28 * 28);
    img_3.print();

    get_COUNT_DELETE();
}

[[maybe_unused]] void test_equal_image_1() {
    int pixels_3[] = {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,80,207,255,254,254,254,97,80,80,44,0,0,0,0,0,0,0,0,0,0,0,0,0,39,158,158,158,168,253,253,253,253,253,253,253,253,253,210,38,0,0,0,0,0,0,0,0,0,0,0,0,226,253,253,253,253,253,253,253,253,253,253,253,253,253,253,241,146,0,0,0,0,0,0,0,0,0,0,0,139,253,253,253,238,113,215,253,253,253,253,253,253,253,253,253,210,43,0,0,0,0,0,0,0,0,0,0,39,34,34,34,30,0,31,148,34,204,235,253,253,253,253,253,236,64,0,0,0,0,0,0,0,0,0,0,91,0,0,0,0,0,0,0,0,35,199,253,253,253,253,244,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,33,202,202,216,253,253,253,253,241,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,167,253,253,253,253,253,253,253,238,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,253,253,253,253,253,253,253,253,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,201,253,253,253,253,253,253,253,230,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,87,87,87,248,253,253,253,253,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,152,253,253,253,250,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,238,253,253,253,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,233,253,253,150,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,203,253,253,253,138,0,0,0,0,0,0,0,0,0,0,0,66,211,211,211,59,36,36,21,26,36,151,222,253,253,253,253,138,0,0,0,0,0,0,0,0,0,0,0,80,253,253,253,253,253,253,195,215,253,253,253,253,253,253,157,77,0,0,0,0,0,0,0,0,0,0,0,80,253,253,253,253,253,253,253,253,253,253,253,253,237,235,40,0,0,0,0,0,0,0,0,0,0,0,0,49,156,247,253,253,253,253,253,253,253,253,159,156,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,253,253,253,253,253,126,78,78,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int pixels_5[] = {5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,37,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,51,110,160,207,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,136,212,253,254,253,253,253,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,80,195,255,254,254,222,181,182,181,135,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,223,250,253,253,254,182,18,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,133,228,253,247,216,151,69,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,253,254,253,116,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,227,254,253,227,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,182,249,254,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,253,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,253,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,92,0,0,0,0,184,253,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,218,46,0,0,27,242,253,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,254,254,215,228,255,254,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,160,206,253,214,140,108,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,36,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int pixels_8[] = {8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,154,180,255,176,118,118,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,253,253,253,253,253,253,236,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,253,204,177,177,177,243,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,216,22,0,0,23,227,238,96,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,205,0,0,17,124,253,253,253,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,234,62,18,201,253,253,253,251,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,253,253,253,253,253,253,221,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,253,253,253,253,208,24,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,236,253,253,253,251,97,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,69,224,253,253,240,169,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,134,253,253,253,253,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,225,253,253,253,253,253,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,227,253,253,250,174,253,253,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,253,253,179,63,111,253,253,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,251,201,13,5,0,166,253,253,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,222,253,198,0,0,0,248,253,231,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,243,253,124,0,38,133,252,253,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,253,253,237,179,223,253,253,190,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,230,253,253,253,253,253,244,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,231,253,253,253,182,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int pixels_9[] = {4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,190,25,0,0,0,0,0,0,0,0,0,0,0,13,25,10,0,0,0,0,0,0,0,0,0,0,0,112,252,125,4,0,0,0,0,0,0,0,0,0,0,132,252,113,0,0,0,0,0,0,0,0,0,0,0,61,252,252,36,0,0,0,0,0,0,0,0,0,0,132,252,240,79,0,0,0,0,0,0,0,0,0,0,84,252,252,36,0,0,0,0,0,0,0,0,0,0,132,252,252,238,52,0,0,0,0,0,0,0,0,12,198,252,252,122,0,0,0,0,0,0,0,0,0,0,99,252,252,252,181,17,0,0,0,0,0,0,0,49,252,252,252,122,0,0,0,0,0,0,0,0,0,0,3,125,252,252,252,100,0,0,0,0,0,0,0,26,218,252,252,36,0,0,0,0,0,0,0,0,0,0,0,15,216,252,252,207,19,0,0,0,0,0,0,49,252,252,252,36,0,0,0,0,0,0,0,0,0,0,0,0,157,252,252,252,48,0,0,0,6,109,109,194,252,252,252,36,0,0,0,0,0,0,0,0,0,0,0,0,100,252,252,252,105,0,58,116,128,252,252,252,252,252,212,19,0,0,0,0,0,0,0,0,0,0,0,0,0,164,253,253,253,253,253,253,255,253,253,253,253,253,253,99,0,0,0,0,0,0,0,0,0,0,0,0,0,49,252,252,252,252,252,252,253,252,252,252,252,252,252,155,0,0,0,0,0,0,0,0,0,0,0,0,0,49,252,252,252,252,252,252,217,216,141,126,252,252,252,155,0,0,0,0,0,0,0,0,0,0,0,0,0,49,252,252,252,234,204,89,0,0,0,49,252,252,252,155,0,0,0,0,0,0,0,0,0,0,0,0,0,14,158,192,151,45,0,0,0,0,0,49,252,252,252,225,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,252,252,252,252,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,228,252,252,252,157,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,229,252,252,252,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,232,252,252,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,206,131,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int* p_pixels_3 = pixels_3; Image img_3; img_3.load(p_pixels_3, 28 * 28);
    int* p_pixels_5 = pixels_5; Image img_5; img_5.load(p_pixels_5, 28 * 28);
    int* p_pixels_8 = pixels_8; Image img_8; img_8.load(p_pixels_8, 28 * 28);
    int* p_pixels_9 = pixels_9; Image img_9; img_9.load(p_pixels_9, 28 * 28);

    img_3.info();
    img_5.info();

    cout << &img_3 << endl;
    cout << &img_5 << endl;
    cout << &img_8 << endl;
    cout << &img_9 << endl;

    img_3 = img_5;

    cout << &img_3 << endl;
    cout << &img_5 << endl;
    cout << &img_8 << endl;
    cout << &img_9 << endl;

    get_COUNT_DELETE();
}

[[maybe_unused]] void test_equal_image_2() {
    int pixels_3[] = {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,80,207,255,254,254,254,97,80,80,44,0,0,0,0,0,0,0,0,0,0,0,0,0,39,158,158,158,168,253,253,253,253,253,253,253,253,253,210,38,0,0,0,0,0,0,0,0,0,0,0,0,226,253,253,253,253,253,253,253,253,253,253,253,253,253,253,241,146,0,0,0,0,0,0,0,0,0,0,0,139,253,253,253,238,113,215,253,253,253,253,253,253,253,253,253,210,43,0,0,0,0,0,0,0,0,0,0,39,34,34,34,30,0,31,148,34,204,235,253,253,253,253,253,236,64,0,0,0,0,0,0,0,0,0,0,91,0,0,0,0,0,0,0,0,35,199,253,253,253,253,244,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,33,202,202,216,253,253,253,253,241,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,167,253,253,253,253,253,253,253,238,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,253,253,253,253,253,253,253,253,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,201,253,253,253,253,253,253,253,230,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,87,87,87,248,253,253,253,253,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,152,253,253,253,250,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,238,253,253,253,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,233,253,253,150,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,203,253,253,253,138,0,0,0,0,0,0,0,0,0,0,0,66,211,211,211,59,36,36,21,26,36,151,222,253,253,253,253,138,0,0,0,0,0,0,0,0,0,0,0,80,253,253,253,253,253,253,195,215,253,253,253,253,253,253,157,77,0,0,0,0,0,0,0,0,0,0,0,80,253,253,253,253,253,253,253,253,253,253,253,253,237,235,40,0,0,0,0,0,0,0,0,0,0,0,0,49,156,247,253,253,253,253,253,253,253,253,159,156,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,253,253,253,253,253,126,78,78,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int pixels_5[] = {5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,37,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,51,110,160,207,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,136,212,253,254,253,253,253,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,80,195,255,254,254,222,181,182,181,135,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,223,250,253,253,254,182,18,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,133,228,253,247,216,151,69,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,253,254,253,116,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,227,254,253,227,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,182,249,254,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,253,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,253,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,92,0,0,0,0,184,253,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,218,46,0,0,27,242,253,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,254,254,215,228,255,254,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,160,206,253,214,140,108,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,36,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int pixels_8[] = {8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,154,180,255,176,118,118,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,253,253,253,253,253,253,236,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,253,204,177,177,177,243,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,216,22,0,0,23,227,238,96,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,205,0,0,17,124,253,253,253,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,234,62,18,201,253,253,253,251,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,253,253,253,253,253,253,221,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,253,253,253,253,208,24,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,236,253,253,253,251,97,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,69,224,253,253,240,169,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,134,253,253,253,253,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,225,253,253,253,253,253,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,227,253,253,250,174,253,253,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,253,253,179,63,111,253,253,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,251,201,13,5,0,166,253,253,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,222,253,198,0,0,0,248,253,231,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,243,253,124,0,38,133,252,253,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,253,253,237,179,223,253,253,190,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,230,253,253,253,253,253,244,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,231,253,253,253,182,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int pixels_9[] = {4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,190,25,0,0,0,0,0,0,0,0,0,0,0,13,25,10,0,0,0,0,0,0,0,0,0,0,0,112,252,125,4,0,0,0,0,0,0,0,0,0,0,132,252,113,0,0,0,0,0,0,0,0,0,0,0,61,252,252,36,0,0,0,0,0,0,0,0,0,0,132,252,240,79,0,0,0,0,0,0,0,0,0,0,84,252,252,36,0,0,0,0,0,0,0,0,0,0,132,252,252,238,52,0,0,0,0,0,0,0,0,12,198,252,252,122,0,0,0,0,0,0,0,0,0,0,99,252,252,252,181,17,0,0,0,0,0,0,0,49,252,252,252,122,0,0,0,0,0,0,0,0,0,0,3,125,252,252,252,100,0,0,0,0,0,0,0,26,218,252,252,36,0,0,0,0,0,0,0,0,0,0,0,15,216,252,252,207,19,0,0,0,0,0,0,49,252,252,252,36,0,0,0,0,0,0,0,0,0,0,0,0,157,252,252,252,48,0,0,0,6,109,109,194,252,252,252,36,0,0,0,0,0,0,0,0,0,0,0,0,100,252,252,252,105,0,58,116,128,252,252,252,252,252,212,19,0,0,0,0,0,0,0,0,0,0,0,0,0,164,253,253,253,253,253,253,255,253,253,253,253,253,253,99,0,0,0,0,0,0,0,0,0,0,0,0,0,49,252,252,252,252,252,252,253,252,252,252,252,252,252,155,0,0,0,0,0,0,0,0,0,0,0,0,0,49,252,252,252,252,252,252,217,216,141,126,252,252,252,155,0,0,0,0,0,0,0,0,0,0,0,0,0,49,252,252,252,234,204,89,0,0,0,49,252,252,252,155,0,0,0,0,0,0,0,0,0,0,0,0,0,14,158,192,151,45,0,0,0,0,0,49,252,252,252,225,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,252,252,252,252,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,228,252,252,252,157,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,229,252,252,252,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,232,252,252,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,206,131,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int* p_pixels_3 = pixels_3;     auto* img_3 = new Image();       img_3->load(p_pixels_3, 28 * 28);
    int* p_pixels_5 = pixels_5;     auto* img_5 = new Image();       img_5->load(p_pixels_5, 28 * 28);
    int* p_pixels_8 = pixels_8;     auto* img_8 = new Image();       img_8->load(p_pixels_8, 28 * 28);
    int* p_pixels_9 = pixels_9;     auto* img_9 = new Image();       img_9->load(p_pixels_9, 28 * 28);

    img_3->info();
    img_5->info();

    cout << &img_3 << endl;
    cout << &img_5 << endl;
    cout << &img_8 << endl;
    cout << &img_9 << endl;

    *img_3 = *img_5;

    cout << &img_3 << endl;
    cout << &img_5 << endl;
    cout << &img_8 << endl;
    cout << &img_9 << endl;

    delete img_3;
    delete img_5;
    delete img_8;
    delete img_9;

    get_COUNT_DELETE();
}


int main() {
    cout << GREEN << "START!" << RESET << endl;

//    test_constructor();
//    test_iterator();
//    test_0();
//    test_1();
//    test_2();
//    test_3();
//    test_load_image();
//    test_equal_image_1();
    test_equal_image_2();


    cout << "COUNT_DELETE_FINAL: " << YELLOW_BACKGROUND << COUNT_DELETE << RESET << endl;
    cout << GREEN << "END!" << RESET << endl;
    return 0;
}